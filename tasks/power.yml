---

- name: Power - Are we running on laptop or static unit?
  ansible.builtin.set_fact:
    is_laptop: >
      /usr/sbin/system_profiler SPHardwareDataType | grep "Model Identifier" | grep "Book"

- name: Power - Register pmset capabilities.
  ansible.builtin.command: "pmset -g cap"
  register: pmset_cap
  changed_when: false

- name: Power - Print out pmset capabilities.
  ansible.builtin.debug:
    var: pmset_cap.stdout_lines

- name: Power - Register current system setup settings (before).
  ansible.builtin.command: pmset -g custom
  register: pmset_output_before
  changed_when: false
  become: true

- name: Power - Print out current system setup settings (before).
  ansible.builtin.debug:
    var: pmset_output_before.stdout_lines

- name: Power - Get current restart-on-freeze status.
  ansible.builtin.shell: >
    systemsetup -getrestartfreeze | awk -F ': ' '{print $2}'
  when: power.restart_on_freeze
  register: getrestartfreeze_current
  changed_when: false
  become: true

- name: Power - Set restart-on-freeze flag.
  ansible.builtin.command: "systemsetup --setrestartfreeze {{ power.restart_on_freeze | ternary('on','off') }}"
  when: power.restart_on_freeze and (getrestartfreeze_current.stdout | lower) != (power.restart_on_freeze | ternary('on','off') )
  become: true

- name: Power - Set the power settings when device is using a/c charger.
  pmset:
    on_charger:
      lidwake: "{{ power.on_charger.lidwake | ternary(1,0) }}"
      ttyskeepawake: "{{ power.on_charger.ttyskeepawake | ternary(1,0) }}"
      powernap: "{{ power.on_charger.powernap | ternary(1,0) }}"
      hibernatemode: "{{ power.on_charger.hibernatemode }}"
      displaysleep: "{{ power.on_charger.displaysleep }}"
      womp: "{{ power.on_charger.womp | ternary(1,0) }}"
      sleep: "{{ power.on_charger.sleep }}"
      tcpkeepalive: "{{ power.on_charger.tcpkeepalive | ternary(1,0) }}"
      halfdim: "{{ power.on_charger.halfdim | ternary(1,0) }}"
      acwake: "{{ power.on_charger.acwake | ternary(1,0) }}"
      disksleep: "{{ power.on_charger.disksleep }}"
  become: true

- name: Power - Set the power settings when device is using battery.
  pmset:
    on_battery:
      lidwake: "{{ power.on_battery.lidwake | ternary(1,0) }}"
      ttyskeepawake: "{{ power.on_battery.ttyskeepawake | ternary(1,0) }}"
      powernap: "{{ power.on_battery.powernap | ternary(1,0) }}"
      hibernatemode: "{{ power.on_battery.hibernatemode }}"
      displaysleep: "{{ power.on_battery.displaysleep }}"
      sleep: "{{ power.on_battery.sleep }}"
      tcpkeepalive: "{{ power.on_battery.tcpkeepalive | ternary(1,0) }}"
      halfdim: "{{ power.on_battery.halfdim | ternary(1,0) }}"
      acwake: "{{ power.on_battery.acwake | ternary(1,0) }}"
      disksleep: "{{ power.on_battery.disksleep }}"
  become: true
  when: is_laptop != ''

- name: Power - Register current system setup settings (after).
  ansible.builtin.command: pmset -g custom
  register: pmset_output_after
  changed_when: false
  become: true

- name: Power - Print out current system setup settings (after).
  ansible.builtin.debug:
    var: pmset_output_after.stdout_lines
